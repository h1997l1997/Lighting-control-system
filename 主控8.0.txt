//========Dht11==========
#include "DHT.h" //加载DHT11的库
#define DHTTYPE DHT11 // 定义传感器类似 DHT11
#define DHTPIN 3 //宏定义DHT数据接口，编译时DHTPIN会替换成2
DHT dht(DHTPIN, DHTTYPE);//声明 dht 函数
//========红外引导============
#include <IRremote.h>
#include <aJSON.h>
int val;
int RECV_PIN = 8;   //信号接收引脚
IRrecv irrecv(RECV_PIN);
decode_results results;
//=======点灯引脚定义===========
int latchPin= 13;
int dataPin1= 12;
int clockPin1 = 11;
int dataPin2= 10;
int clockPin2 = 9;
int ledState = 0;
//======触摸开关模式========
int button=0;
int button_old=0;
//======画板模式使用========
int key_led_low_s=0;
int key_led_high_s=0;
//======模式指示灯=======
int latchPin_led= 7;
int dataPin_led= 4;
int clockPin_led= 2;
//======ESP8266=======
String DEVICEID = "8402"; // 你的设备ID
String  APIKEY = "5037d785d"; //设备密码
String t_input="7427"; //温度上传ID
String a_input="7428";//湿度上传ID
int L_old=0;
int K_v_old = -1;
int tonepin=5;
unsigned long lastCheckStatusTime = 0; //记录上次报到时间
unsigned long lastUpdateTime = 0;//记录上次上传数据时间
const unsigned long postingInterval = 20000; // 每隔40秒向服务器报到一次
unsigned long checkoutTime = 0;//登出时间
const unsigned long updateInterval = 5000; // 数据上传间隔时间5秒
char str1[10]="0";


void setup() {
   //=====点灯程序引脚=======
   pinMode(dataPin1, OUTPUT);
   pinMode(clockPin1, OUTPUT);
   pinMode(latchPin, OUTPUT);
   pinMode(dataPin2, OUTPUT);
   pinMode(clockPin2, OUTPUT);
   //========================
   //pinMode(7,INPUT);//触摸开关
   irrecv.enableIRIn(); // 红外
   pinMode(6, OUTPUT);// 总电源输出
   pinMode(tonepin,OUTPUT);//声音
   pinMode(latchPin_led, OUTPUT);
   pinMode(dataPin_led, OUTPUT);
   pinMode(clockPin_led, OUTPUT);
   Serial.begin(115200);
   delay(5000);//等一会儿ESP8266
}

//==========计算函数==========
int sqx1(int x)
{ int s=1;
  x=x-1;
  for (;x>0;x--)
  {
    s=s*2;
    }
   return s;
  }

int sqx(int x)
{ int s=1;
  if (x==0)
    return 0;
  else{
    x=x-1;
    for (;x>0;x--)
    {
        s=s*2;
    }
   return s;
    }
  
  }

//=======8266相关==========
void read()
{
  while (Serial.available()) {
    String inputString = Serial.readStringUntil('\n');
    //检测json数据是否完整
    int jsonBeginAt = inputString.indexOf("{");
    int jsonEndAt = inputString.lastIndexOf("}");
    if (jsonBeginAt != -1 && jsonEndAt != -1) {
      //净化json数据
      inputString = inputString.substring(jsonBeginAt, jsonEndAt + 1);
      int len = inputString.length() + 1;
      char jsonString[len];
      inputString.toCharArray(jsonString, len);
      aJsonObject *msg = aJson.parse(jsonString);
      processMessage(msg);
      aJson.deleteItem(msg);
    }
  }
}


//{"M":"checkin","ID":"xx1","K":"xx2"}\n
void checkIn() {
  Serial.print("{\"M\":\"checkin\",\"ID\":\"");
  Serial.print(DEVICEID);
  Serial.print("\",\"K\":\"");
  Serial.print(APIKEY);
  Serial.print("\"}\r\n");
}

void say(String ID, String c) {
  Serial.print("{\"M\":\"say\",\"ID\":\"");
  Serial.print(ID);
  Serial.print("\",\"C\":\"");
  Serial.print(c);
  Serial.print("\"}\r\n");
}
//强制设备下线，用消除设备掉线延时
//{"M":"checkout","ID":"xx1","K":"xx2"}\n
void checkOut() {
  Serial.print("{\"M\":\"checkout\",\"ID\":\"");
  Serial.print(DEVICEID);
  Serial.print("\",\"K\":\"");
  Serial.print(APIKEY);
  Serial.print("\"}\n");
}
//查询设备在线状态
//{"M":"status"}\n
void checkStatus() {
  Serial.print("{\"M\":\"status\"}\n");
  lastCheckStatusTime = millis();
}
//处理网络接收到到指令，执行相关动作
void processMessage(aJsonObject *msg) {
  aJsonObject* method = aJson.getObjectItem(msg, "M");
  if (!method) {
    return;
  }
  String M = method->valuestring;
  if (M == "WELCOME TO BIGIOT") {
    checkOut();
    checkoutTime = millis();
    return;
  }
  if (M == "connected") {
    checkIn();
  }
  if (M == "say") {
    aJsonObject* content = aJson.getObjectItem(msg, "C");
    aJsonObject* client_id = aJson.getObjectItem(msg, "ID");
    String C = content->valuestring;
    String F_C_ID = client_id->valuestring;
    //Serial.println(C);
    int str_len=C.length()+1;
    C.toCharArray(str1,str_len);
    //strcpy(str1,C);
    //return C_str;
    if (C == "play") {
      //digitalWrite(LED, HIGH);
    //  led(16);
      say(F_C_ID, "LED on!");

    }
    if (C == "stop") {
     // digitalWrite(LED, LOW);
      say(F_C_ID, "LED off!");
    //  led(0);
    }
  }
}
//上传函数
void update2(String did, String inputid1, float value1, String inputid2, float value2) {
  Serial.print("{\"M\":\"update\",\"ID\":\"");
  Serial.print(did);
  Serial.print("\",\"V\":{\"");
  Serial.print(inputid1);
  Serial.print("\":\"");
  Serial.print(value1);
  Serial.print("\",\"");
  Serial.print(inputid2);
  Serial.print("\":\"");
  Serial.print(value2);
  Serial.println("\"}}");
}

//dht11
void read_t_h()
{ if (millis() - lastUpdateTime > updateInterval) 
  {
  float h = dht.readHumidity();//读取湿度
  float t = dht.readTemperature();//读取摄氏度
  //update1(DEVICEID, t_input, t);
  //update1(DEVICEID, a_input, h);
  update2(DEVICEID, t_input, t, a_input, h);
  lastUpdateTime = millis();
  }
}
//========读取char数字内容======
int read_char_number()
{ reset_char();
  read();
  //char str2[]="";
  int a=str1[0]-'0';
  int b=str1[1]-'0';
  int number=10*a+b;
  //reset_char();
  //Serial.println(a);
  //Serial.println(b);
  //Serial.println(number);
  return number;
  }
//========重置char=============
void reset_char()
{
   int count=0;
   for(;count<10;count++)
   {
    str1[count]='0';
    }
  }
//========开关模式=============
int Touch()
{
  int value=0,i=0;
  value=analogRead(A3);
  if(value>900)
    {
      for(i=1;value>200;)  value=analogRead(A3);
    }
  if(i==1)  button++;
  if(button==8)  button=0;
  mode_led(button+1);
  return button;
}
//==========模式灯点亮==
int mode_led(int x)
{
  digitalWrite(latchPin_led, LOW);
  shiftOut(dataPin_led, clockPin_led, MSBFIRST, sqx1(x));
  digitalWrite(latchPin_led, HIGH);
  }

 //==========电压输入==========
int Volt()
{
  int value=0;
  value=analogRead(A0);
  int i=0;
  for(;61*i<value;i++);
  i--;
  return i;
}
int tune[]=
{
  -1,196,221,248,278,
  294,330,350,393,
  441,495,525,556,
  589,661,700,786
  
};
void newtone(byte tonePin, int frequency, int duration) 
{
int period = 1000000L / frequency;
int pulse = period / 2;
for (long i = 0; i < duration * 1000L; i += period)
{
digitalWrite(tonePin, HIGH);
delayMicroseconds(pulse);
digitalWrite(tonePin, LOW);
delayMicroseconds(pulse);
}
}
void VC()
{
  int Vc=Volt();
  newtone(tonepin,tune[Vc_old],500);
}

//==========红外输入===========


int Judge(long results)
{
int K=-1;
switch(results)
 {
  case 0xFF6897 :  K=0; break;
  case 0xFF30CF :  K=1; break;
  case 0xFF18E7 :  K=2; break;
  case 0xFF7A85 :  K=3; break;
  case 0xFF10EF :  K=4; break;
  case 0xFF38C7 :  K=5; break;
  case 0xFF5AA5 :  K=6; break;
  case 0xFF42BD :  K=7; break;
  case 0xFF4AB5 :  K=8; break;
  case 0xFF52AD :  K=9;break;
  case 0x707000FF :  K=0; break;
  case 0x7070807F :  K=1; break;
  case 0x707040BF :  K=2; break;
  case 0x7070C03F :  K=3; break;
  case 0x707020DF :  K=4; break;
  case 0x7070A05F :  K=5; break;
  case 0x7070609F :  K=6; break;
  case 0x7070E01F :  K=7; break;
  case 0x707010EF :  K=8; break;
  case 0x7070906F :  K=9;break;
 }
return K;
}

int Put()
{
  int X=-1;
  if(irrecv.decode(&results))
  {
    Serial.println(results.value, HEX);
    int M=Judge(results.value);
    delay(300);
    irrecv.resume();
    delay(2000);
    if(irrecv.decode(&results))
    {
      Serial.println(results.value, HEX);
      int N=Judge(results.value);
      delay(300);
      irrecv.resume();
      X=10*M+N;
    }
  }
  return X;
}
//=======点灯程序========
int  led(int count)
{
  if (count > 8)
  {
      digitalWrite(latchPin, LOW);
      shiftOut(dataPin1, clockPin1, MSBFIRST, B11111111);
      int count_high = count-8;
      int x=1;
      int s=0;
      for (;count_high>0;count_high--)
      {
         s=s+x;
         x=2 * x;
      }
      shiftOut(dataPin2, clockPin2, MSBFIRST,s);
  }
 else
 {
      digitalWrite(latchPin, LOW);
      shiftOut(dataPin2, clockPin2, MSBFIRST,0);
      int x1=1;
      int s1=0;
      for (;count>0;count--)
      {
         s1=s1+x1;
         x1=2 * x1;
      }
      shiftOut(dataPin1, clockPin1, MSBFIRST,s1);

  }
 digitalWrite(latchPin, HIGH);
}
//==========默认模式=====
void led_1(int count)
{   clearall();
  if (count>8)
    { for (int i=1;i<9;i++)
    {
    digitalWrite(latchPin, LOW);
    shiftOut(dataPin1, clockPin1, MSBFIRST, sqx(i));
    digitalWrite(latchPin, HIGH);
    delay(200);
    newtone(tonepin,tune[i],500);
    }
    clearall();
    for (int t=9;t<count+1;t++)
    {
    digitalWrite(latchPin, LOW);
    shiftOut(dataPin2, clockPin2, MSBFIRST, sqx(t-8));
    digitalWrite(latchPin, HIGH);
    delay(200);
    newtone(tonepin,tune[t],500);
    }
    }
 else {
     for (int i=1;i<count+1;i++)
    {
        digitalWrite(latchPin, LOW);
        shiftOut(dataPin1, clockPin1, MSBFIRST, sqx(i));
        digitalWrite(latchPin, HIGH);
        delay(200);
        newtone(tonepin,tune[i],200);
      }
    }
}
void button0()
{     if (button_old!=button) clearall();
      digitalWrite(6,HIGH);//总电源开启
      int K_v=Volt();//读取电压，返回亮灯个数
      int K_h=Put(); //红外输入，返回亮灯个数
      //int K_w=read_char_number();
      //Serial.println(K_w);
      //Serial.println(K_h);
      //led(K_w);
      if ( K_h==-1 && K_v_old==K_v)
      {}
      else {
             if ( K_h==-1)  led_1(K_v);
             else  
               {led_1(K_h);
               }
            }
    K_v_old=K_v;
 }
//=======画板模式======
int Volt_pwm()
{
  float value=analogRead(0);
  int ttt=255*value/1023;
  return ttt;
}

void button1()
 {   if (button_old!=button) clearall();
     analogWrite(6,Volt_pwm());//总电源开启
     int key_led_low=0;
     int key_led_high=0;
     int K_h=Put(); //红外输入，返回亮灯个数
     if (K_h==-1){}
     else{
         switch (K_h)
         {
          case 11 : key_led_low=1; break;
          case 21 : key_led_low=2; break;
          case 31 : key_led_low=3; break;
          case 41 : key_led_low=4; break;
          case 12 : key_led_low=5; break;
          case 22 : key_led_low=6; break;
          case 32 : key_led_low=7; break;
          case 42 : key_led_low=8; break;
          case 13 : key_led_high=1; break;
          case 23 : key_led_high=2; break;
          case 33 : key_led_high=3; break;
          case 43 : key_led_high=4; break;
          case 14 : key_led_high=5; break;
          case 24 : key_led_high=6; break;
          case 34 : key_led_high=7; break;
          case 44 : key_led_high=8; break;
          }
          painting(key_led_high,key_led_low);
}
  }

void painting(int key_led_high, int key_led_low)
{  int key_led_high_B=sqx(key_led_high);
   int key_led_low_B=sqx(key_led_low);
   key_led_high_s=key_led_high_s+key_led_high_B;
   key_led_low_s=key_led_low_s+key_led_low_B;
   digitalWrite(latchPin, LOW);
   shiftOut(dataPin2, clockPin2, MSBFIRST, key_led_high_s);
   shiftOut(dataPin1, clockPin1, MSBFIRST, key_led_low_s);
   digitalWrite(latchPin, HIGH);
}

//=======光敏模式======
void button2()
 {  if (button_old!=button) clearall();
    key_led_low_s=0;
    key_led_high_s=0;//清除之前的状态
    float value=analogRead(A2);
    //float x=(value*0.00025*value);
    int L=255*value/1023;
    led(16);
    int i=(L-L_old)/abs((L-L_old));
    for(;L_old==L;)
    {
      analogWrite(6,L_old);
      delay(500);
      L_old=L_old+i;
     }
     L_old=L;

  }
//=======声控模式=====
void button3()
 {  if (button_old!=button) clearall();
    int K=Voice();
    if(K)
    {
       led(16);
       delay(30000);       //亮灯后延迟灭灯
       clearall();
    }

 }
int Voice()                //判断声音输入
{
  int value=0,K=0;
  value=analogRead(A2);
  Serial.println(value);
  if(value>900)  K=1;
  return K;
}

//==========清零函数==========
void clearall()
{
  digitalWrite(latchPin, LOW);
  shiftOut(dataPin2, clockPin2, MSBFIRST, 0);
  shiftOut(dataPin1, clockPin1, MSBFIRST, 0);
  digitalWrite(latchPin, HIGH);
  }

//========关灯游戏========
int Game[]=
{
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0,
  0,0,0,0,0,0
};
int Game_switch(int i)
{
  if(Game[i]==0) Game[i]=1;
  else Game[i]=0;
  return i;
}
void Game_control(int K)
{
  int M=Game_Math(K);
  Game_switch(M);
  Game_switch(M+1);
  Game_switch(M-1);
  Game_switch(M+6);
  Game_switch(M-6);
}
int Game_Math(int i)
{
  int L=(((i-1)/4)+1);
  int M=L*6+(i-(L*4)); 
  return M;
}
int Game_math1()
{
  int s=0;
  for(int i=0;i<8;i++)
  {
    int K=1;
    int M=Game_Math(i+1); 
    for(int j=0;j<i;j++)
    {
      K=2*K;
    }
    s=s+K*Game[M];
  }
  return s;
}
int Game_math2()
{
  int s=0;
  for(int i=8;i<16;i++)
  {
    int K=1;
    int M=Game_Math(i+1); 
    for(int j=8;j<i;j++)
    {
      K=2*K;
    }
    s=s+K*Game[M];
  }
  return s;
}
void Game_Led(int s1,int s2)
{
    digitalWrite(latchPin, LOW);
    shiftOut(dataPin1, clockPin1, MSBFIRST, s1);
    shiftOut(dataPin2, clockPin2, MSBFIRST,s2);
    digitalWrite(latchPin, HIGH);
}
void Game_light()
{
  int s1=Game_math1();
  int s2=Game_math2();
  Game_Led(s1,s2);
}
void Game_main()
{  digitalWrite(6,HIGH);
   int K=Put();
   Game_control(K);
   Game_light();
}
//==========莫尔斯码===========
long Morse[]=
{
  7,
  31,1113,1313,113,
  1,1311,133,1111,
  11,3331,313,1131,
  33,13,333,1331,
  3133,131,111,3,
  311,3111,331,3113,
  3313,1133,
  33331,33311,33111,31111,11111,
  11113,11133,11333,13333,33333
};
int Mo_cen=0;
int Mo_get(char ch)
{
  int K=-1;
  if('a'<=ch && 'z'>=ch)
  {
    K=int(ch)-96;
  }
    if('A'<=ch && 'Z'>=ch)
  {
    K=int(ch)-64;
  }
    if('0'<=ch && '9'>=ch)
  {
    K=int(ch)-21;
  }
    if(' '==ch)
  {
    K=0;
  }
  return K;
}
void Mo_cout(int M)
{ digitalWrite(6,HIGH);
  int K=-1;
  K=Morse[M];
  for(;K!=0;)
  { 
    int a=K%10;
    led(16);
    delay(200*a);
    clearall();
    K=K/10;
    delay(400);
  }
}
void Mo_main()
{  if (button_old!=button) 
    {clearall();
     Mo_cen=0}
   reset_char();
   read();
   int K=-1;
   char str2[5]="a0";
  if(Mo_cen==0)
   {
      for(int i=0;K!=27;i++)
       {
         K=Mo_get(str2[i]);
         Mo_cout(K);
         delay(500);
      }
     Mo_cen=1;
   }
}
//==========定时模式=========
unsigned long number_red_second=0;
unsigned long number_wifi_second=0;
void clock_A()
{ 
  led(16);
  int number_red_min=Put();
  int number_wifi_min=read_char_number();
  unsigned long time_now=millis()*1000;
  if (number_red_min!=-1)     number_red_second=number_red_min*60+time_now;  
  if (number_wifi_min!=0)      number_wifi_second=number_wifi_min*60+time_now;
  if(number_red_second>0 && (number_red_second-time_now)<10)
   {
      for(int i=2;i<255;i++)   analogWrite(6,i);
   }
  if(number_wifi_second>0 && (number_wifi_second-time_now)<10)
   {
      for(int i=2;i<255;i++)   analogWrite(6,i);
   }
  if(number_red_second>0 && (number_red_second-time_now)<2)
   {
      clock_song();
   }
  if(number_wifi_second>0 && (number_wifi_second-time_now)<2)
   {
      clock_song();
   }
}                                        
int song[]=                 //根据简谱列出各频率
{
  350,350,393,441,
  441,393,350,330,
  294,294,330,350,
  350,330,330,
  350,350,393,441,
  441,393,350,330,
  294,294,330,350,
  330,294,294,
  330,330,350,294,
  330,350,393,350,294,
  330,350,393,350,330,
  294,330,221,-1,
  350,350,393,441,
  441,393,350,393,330,
  294,294,330,350,
  330,294,294
};
float durt[]=                   //根据简谱列出各节拍
{
  1,1,1,1,
  1,1,1,1,
  1,1,1,1,
  1+0.5,0.5,1+1,
  1,1,1,1,
  1,1,1,1,
  1,1,1,1,
  1+0.5,0.5,1+1,
  1,1,1,1,
  1,0.5,0.5,1,1,
  1,0.5,0.5,1,1,
  1,1,1,1,
  1,1,1,1,
  1,1,1,0.5,0.5,
  1,1,1,1,
  1+0.5,0.5,1+1,
};
int length=sizeof(tune)/sizeof(tune[0]);
void clock_song()
{
   for(int i=0;i<length;i++)       newtone(tonepin,song[i],500*durt[i]);   
     }

//==========氛围模式========
void fenwei()
{
  float value=analogRead(A2);
  if (value>520 || value<480) 
     {  int randnumber=random(0,65535);
        digitalWrite(latchPin_led, LOW);
        shiftOut(dataPin_led, clockPin_led, MSBFIRST, randnumber);
        digitalWrite(latchPin_led, HIGH);
        delay(10);
     }
  if (value>480 || value<520) 
     {  int randnumber=random(0,65535);
        digitalWrite(latchPin_led, LOW);
        shiftOut(dataPin_led, clockPin_led, MSBFIRST, randnumber);
        digitalWrite(latchPin_led, HIGH);
        delay(30);
     }
   if (value>600 || value<400) 
     {  int randnumber=random(0,65535);
        digitalWrite(latchPin_led, LOW);
        shiftOut(dataPin_led, clockPin_led, MSBFIRST, randnumber);
        digitalWrite(latchPin_led, HIGH);
        delay(5);
     }
  }
//===========主函数==========
void loop() {
  //每一定时间查询一次设备在线状态，同时替代心跳
  if (millis() - lastCheckStatusTime > postingInterval) {
    checkStatus();
  }
  //checkout 50ms 后 checkin
  if ( checkoutTime != 0 && millis() - checkoutTime > 50 ) {
    checkIn();
    checkoutTime = 0;
  }
  read_t_h();
  button=Touch();//读取开关模式
  //Serial.println(str1);
  switch(button)
  {
    case 0 : button0();//默认模式
            break;
    case 1 : button1();//画板模式
            break;
    case 2 : button2();//光敏模式
            break;
    case 3 : button3();//声控模式
            break;
    case 4 : Game_main();//关灯游戏
            break;
    case 5 : Mo_main();//莫尔斯
            break;
    case 6 : clock_A();//定时模式
            break;
    case 7 : fenwei();//氛围模式
            break;
    }
  button_old=button;
  
}
